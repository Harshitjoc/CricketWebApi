// <auto-generated />
using System;
using Cricket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cricket.Migrations
{
    [DbContext(typeof(CricketContext))]
    partial class CricketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cricket.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Cricket.Models.MatchDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamAId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamBId")
                        .HasColumnType("int");

                    b.Property<int>("TossId")
                        .HasColumnType("int");

                    b.Property<int?>("UmpireRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("TossId");

                    b.HasIndex("UmpireRoleId");

                    b.ToTable("MatchDetail");
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Cricket.Models.PlayerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayerRole");
                });

            modelBuilder.Entity("Cricket.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Cricket.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Stadium");
                });

            modelBuilder.Entity("Cricket.Models.TeamA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerRoleId");

                    b.ToTable("TeamA");
                });

            modelBuilder.Entity("Cricket.Models.TeamB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerRoleId");

                    b.ToTable("TeamB");
                });

            modelBuilder.Entity("Cricket.Models.Toss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Toss");
                });

            modelBuilder.Entity("Cricket.Models.Umpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Umpire");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UmpireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UmpireId");

                    b.ToTable("UmpireRole");
                });

            modelBuilder.Entity("Cricket.Models.MatchDetail", b =>
                {
                    b.HasOne("Cricket.Models.Series", "Series")
                        .WithMany("MatchDetails")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.Stadium", "Stadium")
                        .WithMany("MatchDetails")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.TeamA", "TeamA")
                        .WithMany("MatchDetails")
                        .HasForeignKey("TeamAId");

                    b.HasOne("Cricket.Models.TeamB", "TeamB")
                        .WithMany("MatchDetails")
                        .HasForeignKey("TeamBId");

                    b.HasOne("Cricket.Models.Toss", "Toss")
                        .WithMany("MatchDetails")
                        .HasForeignKey("TossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.UmpireRole", "UmpireRole")
                        .WithMany("MatchDetails")
                        .HasForeignKey("UmpireRoleId");

                    b.Navigation("Series");

                    b.Navigation("Stadium");

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("Toss");

                    b.Navigation("UmpireRole");
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.HasOne("Cricket.Models.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cricket.Models.Stadium", b =>
                {
                    b.HasOne("Cricket.Models.Country", "Country")
                        .WithMany("Stadia")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cricket.Models.TeamA", b =>
                {
                    b.HasOne("Cricket.Models.Player", "Player")
                        .WithMany("TeamAs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.PlayerRole", "PlayerRole")
                        .WithMany("TeamAs")
                        .HasForeignKey("PlayerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerRole");
                });

            modelBuilder.Entity("Cricket.Models.TeamB", b =>
                {
                    b.HasOne("Cricket.Models.Player", "Player")
                        .WithMany("TeamBs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.PlayerRole", "PlayerRole")
                        .WithMany("TeamBs")
                        .HasForeignKey("PlayerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerRole");
                });

            modelBuilder.Entity("Cricket.Models.Umpire", b =>
                {
                    b.HasOne("Cricket.Models.Country", "Country")
                        .WithMany("Umpires")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRole", b =>
                {
                    b.HasOne("Cricket.Models.Umpire", "Umpire")
                        .WithMany("UmpireRoles")
                        .HasForeignKey("UmpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Umpire");
                });

            modelBuilder.Entity("Cricket.Models.Country", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Stadia");

                    b.Navigation("Umpires");
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.Navigation("TeamAs");

                    b.Navigation("TeamBs");
                });

            modelBuilder.Entity("Cricket.Models.PlayerRole", b =>
                {
                    b.Navigation("TeamAs");

                    b.Navigation("TeamBs");
                });

            modelBuilder.Entity("Cricket.Models.Series", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.Stadium", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.TeamA", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.TeamB", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.Toss", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.Umpire", b =>
                {
                    b.Navigation("UmpireRoles");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRole", b =>
                {
                    b.Navigation("MatchDetails");
                });
#pragma warning restore 612, 618
        }
    }
}

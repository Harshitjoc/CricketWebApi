// <auto-generated />
using System;
using Cricket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cricket.Migrations
{
    [DbContext(typeof(CricketContext))]
    [Migration("20221211145633_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cricket.Models.BatsmanScoreBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Fours")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Scored")
                        .HasColumnType("int");

                    b.Property<int>("Sixes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("BatsmanScoreBoard");
                });

            modelBuilder.Entity("Cricket.Models.BowlerScoreBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Overs")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Wickets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("BowlerScoreBoard");
                });

            modelBuilder.Entity("Cricket.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Cricket.Models.MatchDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TossId")
                        .HasColumnType("int");

                    b.Property<int>("UmpireRoleMapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("TossId");

                    b.HasIndex("UmpireRoleMapId");

                    b.ToTable("MatchDetail");
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Cricket.Models.PlayerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayerRole");
                });

            modelBuilder.Entity("Cricket.Models.PlayerRoleMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerRoleId");

                    b.ToTable("PlayerRoleMap");
                });

            modelBuilder.Entity("Cricket.Models.ScoreBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Scored")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("ScoreBoard");
                });

            modelBuilder.Entity("Cricket.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Cricket.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Stadium");
                });

            modelBuilder.Entity("Cricket.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Cricket.Models.TeamPlayerMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("PlayerCount")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayerMap");
                });

            modelBuilder.Entity("Cricket.Models.Toss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Toss");
                });

            modelBuilder.Entity("Cricket.Models.Umpire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Umpire");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UmpireRole");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRoleMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UmpireId")
                        .HasColumnType("int");

                    b.Property<int>("UmpireRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UmpireId");

                    b.HasIndex("UmpireRoleId");

                    b.ToTable("UmpireRoleMap");
                });

            modelBuilder.Entity("Cricket.Models.BatsmanScoreBoard", b =>
                {
                    b.HasOne("Cricket.Models.Player", null)
                        .WithMany("BatsmanScoreBoards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.BowlerScoreBoard", b =>
                {
                    b.HasOne("Cricket.Models.Player", null)
                        .WithMany("BowlerScoreBoards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.MatchDetail", b =>
                {
                    b.HasOne("Cricket.Models.Series", null)
                        .WithMany("MatchDetails")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.Stadium", null)
                        .WithMany("MatchDetails")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.Toss", null)
                        .WithMany("MatchDetails")
                        .HasForeignKey("TossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.UmpireRoleMap", null)
                        .WithMany("MatchDetails")
                        .HasForeignKey("UmpireRoleMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.HasOne("Cricket.Models.Country", null)
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.PlayerRoleMap", b =>
                {
                    b.HasOne("Cricket.Models.Player", null)
                        .WithMany("PlayerRoleMaps")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.PlayerRole", null)
                        .WithMany("PlayerRoleMaps")
                        .HasForeignKey("PlayerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.ScoreBoard", b =>
                {
                    b.HasOne("Cricket.Models.Team", null)
                        .WithMany("ScoreBoards")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.Stadium", b =>
                {
                    b.HasOne("Cricket.Models.Country", null)
                        .WithMany("Stadiums")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.TeamPlayerMap", b =>
                {
                    b.HasOne("Cricket.Models.Player", null)
                        .WithMany("TeamPlayerMaps")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.Team", null)
                        .WithMany("TeamPlayerMaps")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.Umpire", b =>
                {
                    b.HasOne("Cricket.Models.Country", null)
                        .WithMany("Umpires")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.UmpireRoleMap", b =>
                {
                    b.HasOne("Cricket.Models.Umpire", null)
                        .WithMany("UmpireRoleMaps")
                        .HasForeignKey("UmpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cricket.Models.UmpireRole", null)
                        .WithMany("UmpireRoleMaps")
                        .HasForeignKey("UmpireRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cricket.Models.Country", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Stadiums");

                    b.Navigation("Umpires");
                });

            modelBuilder.Entity("Cricket.Models.Player", b =>
                {
                    b.Navigation("BatsmanScoreBoards");

                    b.Navigation("BowlerScoreBoards");

                    b.Navigation("PlayerRoleMaps");

                    b.Navigation("TeamPlayerMaps");
                });

            modelBuilder.Entity("Cricket.Models.PlayerRole", b =>
                {
                    b.Navigation("PlayerRoleMaps");
                });

            modelBuilder.Entity("Cricket.Models.Series", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.Stadium", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.Team", b =>
                {
                    b.Navigation("ScoreBoards");

                    b.Navigation("TeamPlayerMaps");
                });

            modelBuilder.Entity("Cricket.Models.Toss", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Cricket.Models.Umpire", b =>
                {
                    b.Navigation("UmpireRoleMaps");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRole", b =>
                {
                    b.Navigation("UmpireRoleMaps");
                });

            modelBuilder.Entity("Cricket.Models.UmpireRoleMap", b =>
                {
                    b.Navigation("MatchDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
